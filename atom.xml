<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Xujiongbo]]></title>
  
  <link href="/blog/atom.xml" rel="self"/>
  <link href="https://xujiongbo.github.io/blog/"/>
  <updated>2016-11-04T13:37:24.000Z</updated>
  <id>https://xujiongbo.github.io/blog/</id>
  
  <author>
    <name><![CDATA[Xujiongbo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[JavaScript的常用API中一些可能忽略的点]]></title>
    <link href="https://xujiongbo.github.io/blog/post/javascript-apis/"/>
    <id>https://xujiongbo.github.io/blog/post/javascript-apis/</id>
    <published>2016-10-11T13:23:02.000Z</published>
    <updated>2016-11-04T13:37:24.000Z</updated>
    <content type="html"><![CDATA[<p>ECMAScript定义了一些很有用的API，像String.prototype.split、Array.prototype.sort等字符串或数组的原型方法，其中有一些API非常灵活，我们平时可能只用到了部分常用的调用方式，而忽略了它们的其他用法，在这里做个小总结。<br><a id="more"></a></p>
<h4 id="字符串String">字符串String</h4><h5 id="split的第二个参数">split的第二个参数</h5><p>String.prototype.split的第一个参数表示分隔符，可以是字符串或正则表达式；的第二个参数n是数字类型的，表示字符串被分割成长度最大为n的数组，当n小于0时会被忽略<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">"one,two,three,four,five"</span></span><br><span class="line">text.split(<span class="string">","</span>) <span class="comment">//["one", "two", "three", "four", "five"]</span></span><br><span class="line">text.split(<span class="string">","</span>, <span class="number">2</span>) <span class="comment">//["one", "two"]</span></span><br></pre></td></tr></table></figure></p>
<h5 id="slice，substr与substring">slice，substr与substring</h5><p>这三个方法的功能都是字符串截取（当然都不影响原字符串），并且都可以接受一或两个参数，第一个参数表示要截取的子字符串的开始位置，slice和substring的第二个参数表示的是子字符串最后一个字符后面的位置，而substr的第二个参数则表示子字符串的最大长度。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"0123456789"</span></span><br><span class="line">str.slice(<span class="number">3</span>)        <span class="comment">//"3456789"</span></span><br><span class="line">str.substring(<span class="number">3</span>)    <span class="comment">//"3456789"</span></span><br><span class="line">str.substr(<span class="number">3</span>)       <span class="comment">//"3456789"</span></span><br><span class="line">str.slice(<span class="number">3</span>, <span class="number">6</span>)     <span class="comment">//"345"</span></span><br><span class="line">str.substring(<span class="number">3</span>, <span class="number">6</span>) <span class="comment">//"345"</span></span><br><span class="line">str.substr(<span class="number">3</span>, <span class="number">6</span>)    <span class="comment">//"345678"</span></span><br></pre></td></tr></table></figure></p>
<p>当传入的参数为负值是3个方法的表现就各不相同了。slice会把传入的负数与字符串的长度相加，substring会把所有的负值参数当作0，substr则会把第一个负值参数加上字符串长度，第二个负值参数转换为0。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"0123456789"</span></span><br><span class="line">str.slice(-<span class="number">3</span>)       <span class="comment">//"789"</span></span><br><span class="line">str.substring(-<span class="number">3</span>)   <span class="comment">//"0123456789"</span></span><br><span class="line">str.substr(-<span class="number">3</span>)      <span class="comment">//"789"</span></span><br><span class="line">str.slice(-<span class="number">3</span>, -<span class="number">6</span>)   <span class="comment">//""</span></span><br><span class="line">str.slice(<span class="number">3</span>, -<span class="number">6</span>)    <span class="comment">//"3"</span></span><br><span class="line">str.substring(<span class="number">3</span>, -<span class="number">6</span>)<span class="comment">//"012"</span></span><br><span class="line">str.substr(<span class="number">3</span>, -<span class="number">6</span>)   <span class="comment">//""</span></span><br></pre></td></tr></table></figure></p>
<h5 id="indexOf和lastIndexOf">indexOf和lastIndexOf</h5><p>indexOf和lastIndexOf都可以接收一或两个参数，要注意的是，这两个方法都是只要第一次找到子字符串就返回子串的位置，不同的是indexOf是从头开始往后查找，而lastIndexOf是从尾开始往前查找。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"123454321"</span></span><br><span class="line">str.indexOf(<span class="string">"3"</span>)        <span class="comment">//2</span></span><br><span class="line">str.lastIndexOf(<span class="string">"3"</span>)    <span class="comment">//6</span></span><br></pre></td></tr></table></figure></p>
<p>这两个方法都可以接受第二个参数，表示从字符串的哪个位置开始搜索。indexOf从指定的位置开始向后搜索，lastIndexOf则是从指定的位置开始向前搜索。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"123454321"</span></span><br><span class="line">str.indexOf(<span class="string">"3"</span>, <span class="number">5</span>)     <span class="comment">//6</span></span><br><span class="line">str.lastIndexOf(<span class="string">"3"</span>, <span class="number">5</span>) <span class="comment">//2</span></span><br></pre></td></tr></table></figure></p>
<h5 id="replace">replace</h5><p>若String.prototype.replace的第一个参数不是带有g(global)修饰的正则表达式，则默认只会替换第一个子字符串；它的第二个参数可以是一个函数，这个函数接受的第一个参数是模式的匹配项，最后两个参数是模式的匹配项在字符串中的位置和原始字符串，在正则表达式中定义了n个捕获组的情况下，第一个参数和最后两个参数之间还会有n个参数，表示第n个捕获组的匹配项。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlEscape</span> (<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> text.replace(<span class="regexp">/[&lt;&gt;"&amp;]/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">match, position, originalText</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (match) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&amp;lt;'</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&amp;gt;'</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'&amp;'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&amp;amp;'</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&amp;quot;'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ECMAScript定义了一些很有用的API，像String.prototype.split、Array.prototype.sort等字符串或数组的原型方法，其中有一些API非常灵活，我们平时可能只用到了部分常用的调用方式，而忽略了它们的其他用法，在这里做个小总结。<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="https://xujiongbo.github.io/blog/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="https://xujiongbo.github.io/blog/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[理解async/await]]></title>
    <link href="https://xujiongbo.github.io/blog/post/understanding-async-await/"/>
    <id>https://xujiongbo.github.io/blog/post/understanding-async-await/</id>
    <published>2016-06-30T04:48:54.000Z</published>
    <updated>2016-08-10T13:44:24.000Z</updated>
    <content type="html"><![CDATA[<p>async/await已经成为es7 stage-4的一部分。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>async/await已经成为es7 stage-4的一部分。</p>
]]>
    </summary>
    
      <category term="JavaScript" scheme="https://xujiongbo.github.io/blog/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="https://xujiongbo.github.io/blog/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript小贴士]]></title>
    <link href="https://xujiongbo.github.io/blog/post/javascript-tips/"/>
    <id>https://xujiongbo.github.io/blog/post/javascript-tips/</id>
    <published>2016-01-21T08:17:27.000Z</published>
    <updated>2016-11-14T02:39:59.000Z</updated>
    <content type="html"><![CDATA[<p>JavaScript中有很多值得学习和记住的小技巧和经典的代码片段，在这里做个小总结。<br><a id="more"></a></p>
<h4 id="1-_链式方法">1. 链式方法</h4><p>jQuery中 $dom.html().css().addClass() 这类的就叫链式方法，在对象方法中返回对象本身(this)就可以实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Chain</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.val = val</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.val)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.setVal = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = val</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> chain = <span class="keyword">new</span> Chain(<span class="string">'foo'</span>)</span><br><span class="line">chain.print().setVal(<span class="string">'bar'</span>).print()</span><br><span class="line"><span class="comment">//foo</span></span><br><span class="line"><span class="comment">//bar</span></span><br></pre></td></tr></table></figure></p>
<h4 id="2-_注意字符串连接">2. 注意字符串连接</h4><p>JavaScript中经常会有一些意想不到的类型转换，’+’是其中最常见的一种运算，它既可以做数字的加法，也可以做字符串连接，不注意使用可能会出现不想看到的结果。看下面的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c1 = <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> c2 = <span class="number">34</span></span><br><span class="line"><span class="keyword">let</span> c3 = <span class="string">'56'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = c1 + c2 + c3 <span class="comment">//'4656'</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="string">''</span>.concat(c1, c2, c3) <span class="comment">//'123456'</span></span><br></pre></td></tr></table></figure></p>
<p>结果1中先做了加法，而非我们期望的字符串连接，使用第二种方法更安全一些。<br>如果是ES6，使用template string显然更方便。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c1 = <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> c2 = <span class="number">34</span></span><br><span class="line"><span class="keyword">let</span> c3 = <span class="string">'56'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">`<span class="subst">$&#123;c1&#125;</span><span class="subst">$&#123;c2&#125;</span><span class="subst">$&#123;c3&#125;</span>`</span> <span class="comment">//'123456'</span></span><br></pre></td></tr></table></figure></p>
<h4 id="3-_双波浪运算(~~)">3. 双波浪运算(~~)</h4><p>‘~~’表示执行两次’~’运算，对于正数，它相当于Math.floor()，对于负数则相当于Math.ceil()，只是性能更高，写起来也更快，不过要注意它只能用于32位及以内的数值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~<span class="number">12</span>       <span class="comment">//-13</span></span><br><span class="line">~~<span class="number">12.34</span>     <span class="comment">//12</span></span><br><span class="line">~~<span class="number">12.89</span>     <span class="comment">//12</span></span><br><span class="line">~~-<span class="number">12.88</span>    <span class="comment">//-13</span></span><br></pre></td></tr></table></figure></p>
<h4 id="4-_使用!!总是返回Boolean类型">4. 使用!!总是返回Boolean类型</h4><p>‘!!’表示执行两次非运算，经过类型转换之后总是会返回布尔值，这在有些场景下会很有用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLogin</span> (<span class="params">req</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !!req.session.user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="5-_函数节流">5. 函数节流</h4><p>有时候我们需要防止某个函数执行过于频繁，以提高性能，比如window.onresize的callback等。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span> (<span class="params">fn, interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer,</span><br><span class="line">    firstTime = <span class="literal">true</span> <span class="comment">//是否首次调用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>,</span><br><span class="line">      self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (firstTime) &#123; <span class="comment">//如果是首次调用，不用延时</span></span><br><span class="line">      fn.apply(self, args)</span><br><span class="line">      <span class="keyword">return</span> firstTime = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      clearTimeout(timer)</span><br><span class="line">      fn.apply(self, args)</span><br><span class="line">      timer = <span class="literal">null</span></span><br><span class="line">    &#125;, interval)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = throttle(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">document</span>.body.clientWidth)</span><br><span class="line">&#125;, <span class="number">250</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="6-_惰性载入函数">6. 惰性载入函数</h4><p>由于浏览器之间的差异，在开发前端的时候，一些特性嗅探操作总是不可避免的，比如一个比较通用的添加事件的函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addListener = <span class="function"><span class="keyword">function</span> (<span class="params">el, type, handler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">    el.addEventListener(type, handler, <span class="literal">false</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    el.attachEvent(type, handler)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面代码的缺点是每次调用addListener都用执行里面的if分支判断，这种情况是完全可以避免的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addListener = <span class="function"><span class="keyword">function</span> (<span class="params">el, type, handler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</span><br><span class="line">    addListener = <span class="function"><span class="keyword">function</span> (<span class="params">el, type, handler</span>) </span>&#123;</span><br><span class="line">      el.addEventListener(type, handler, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    addListener = <span class="function"><span class="keyword">function</span> (<span class="params">el, type, handler</span>) </span>&#123;</span><br><span class="line">      el.attachEvent(type, handler)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  addListener(el, type, handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面的代码直接在函数内部重写了addListener函数，这样只有首次调用的时候需要做if判断，往后的调用都不需要再做判断。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>JavaScript中有很多值得学习和记住的小技巧和经典的代码片段，在这里做个小总结。<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="https://xujiongbo.github.io/blog/tags/JavaScript/"/>
    
      <category term="JavaScript" scheme="https://xujiongbo.github.io/blog/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript测试框架]]></title>
    <link href="https://xujiongbo.github.io/blog/post/javascript-test-framework/"/>
    <id>https://xujiongbo.github.io/blog/post/javascript-test-framework/</id>
    <published>2015-11-09T05:38:40.000Z</published>
    <updated>2016-11-14T03:45:30.000Z</updated>
    <content type="html"><![CDATA[<h4 id="1-应该选哪种测试框架?">1.应该选哪种测试框架?</h4><p>现在比较流行的JavaScript测试框架有<a href="https://github.com/mochajs/mocha" target="_blank" rel="external">Mocha</a>，<a href="https://github.com/jasmine/jasmine" target="_blank" rel="external">Jasmine</a>，<a href="https://github.com/avajs/ava" target="_blank" rel="external">AVA</a>，这几种框架从根本上来说没有好坏之分，只有适不适合，选用哪种测试框架要看个人情况以及具体项目的类型决定。</p>
<h5 id="1-数据对比">1.数据对比</h5><p>关于它们的一些数据对比可以看<a href="https://npmcompare.com/compare/ava,jasmine,mocha" target="_blank" rel="external">这里</a>，可以看到Mocha比另外两个早发布两年，也是其中最流行的，Jasmine次之(尽管现在Jasmine的star数好像比Mocha多一点)。Mocha也是跟新版本最频繁的，平均每15天跟新一个版本，AVA每一个月跟新一个版本，Jasmine则每两个月跟新一次。</p>
<h5 id="2-语法">2.语法</h5><h4 id="2-应该选哪种断言库?">2.应该选哪种断言库?</h4><p>除了Node.js内置的assert module之外，比较流行的断言库有<a href="https://github.com/chaijs/chai" target="_blank" rel="external">chai</a>，<a href="https://github.com/shouldjs/should.js" target="_blank" rel="external">should.js</a>等。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="1-应该选哪种测试框架?">1.应该选哪种测试框架?</h4><p>现在比较流行的JavaScript测试框架有<a href="https://github.com/mochajs/mocha" target="_blank" rel="external">Mo]]>
    </summary>
    
      <category term="mocha" scheme="https://xujiongbo.github.io/blog/tags/mocha/"/>
    
      <category term="test framework" scheme="https://xujiongbo.github.io/blog/tags/test-framework/"/>
    
      <category term="JavaScript" scheme="https://xujiongbo.github.io/blog/categories/JavaScript/"/>
    
  </entry>
  
</feed>
